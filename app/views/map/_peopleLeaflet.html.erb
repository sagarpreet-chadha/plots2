<%= stylesheet_link_tag "/lib/leaflet/dist/leaflet.css" %>
<%= stylesheet_link_tag "/lib/leaflet-environmental-layers/dist/LeafletEnvironmentalLayers.css" %>
<%= javascript_include_tag('/lib/leaflet-environmental-layers/dist/LeafletEnvironmentalLayers.js') %>
<%= javascript_include_tag('/lib/leaflet-environmental-layers/dist/windRoseLayer.js') %>
<%= javascript_include_tag('/lib/leaflet-hash/leaflet-hash.js') %>


  <% unique_id = rand(100) %>
  <style>
  	#map<%= unique_id %> { width:100%; height:300px; margin: 0; position: relative;}
  	/*.leaflet-top{
  		overflow: auto ;
  		background: white ;
  	}*/
  </style>
	
<div onmouseover="document.body.style.overflow='hidden';"  onmouseout="document.body.style.overflow='auto';">
   <div class="leaflet-map" id="map<%= unique_id %>"></div>
 </div>
	<% if defined? people %>
		<p><i><small>
			Share your own location on <a href='/profile'>your profile</a>.
			Learn about <a href='https://publiclab.org/wiki/location-privacy'>privacy</a> 
		</small></i></p>
	<% end %>

  <script>
  
  	 L.Icon.PLmarker = L.Icon.extend({
	    options: {
	      iconUrl: 'https://cdn.rawgit.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-black.png',
	      shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
	      iconSize: [25, 41],
	      iconAnchor: [12, 41],
	      popupAnchor: [1, -34],
	      shadowSize: [41, 41]
	    }
	});
  	L.icon.PLmarker_green = function () {
    	return new L.Icon.PLmarker();
	};


   var bounds = new L.LatLngBounds(new L.LatLng(84.67351257 , -172.96875) , new L.LatLng(-54.36775852 , 178.59375)) ;
   var map<%= unique_id %> = L.map('map<%= unique_id %>', {
      maxBounds: bounds , 
      maxBoundsViscosity: 0.75
    }).on('load', onMapLoad).setView([<%= lat %>,<%= lon %>], 2);
   map<%= unique_id %>.options.minZoom = 2 ;
   // var searchLayer<%= unique_id %> = L.layerGroup().addTo(map<%= unique_id %>);
   //  // add the search bar to the map
   // var controlSearch<%= unique_id %> = new L.Control.Search({
   //    position:'topright',    // where do you want the search bar?
   //    layer: searchLayer<%= unique_id %>,  // name of the layer
   //    initial: false,
   //    minLength: 1,
   //    textErr: 'Person not found' , 
   //    zoom: 7,        // set zoom to found location when searched
   //    marker: false,
   //    textPlaceholder: 'search people' // placeholder while nothing is searched
   //  });
   // map<%= unique_id %>.addControl(controlSearch<%= unique_id %>);
    /*
    controlSearch<%= unique_id %>.on('search:collapsed', function(e) {
    map<%= unique_id %>.setView([<%= lat %>,<%= lon %>], 2);
    })
    */
   function onMapLoad(e){
   	console.log("hi") ;
     $.getJSON("/api/srch/peoplelocations?srchString=100&tagName=<%= @tagname_param %>" , function(data){
     	var layerGroup = L.layerGroup() ; 
       if (!!data.items){
         for (i = 0; i < data.items.length ; i++) { 
	 	   var greenIcon =new L.icon.PLmarker_green();
	 	   var url = data.items[i].docUrl ;
	 	   var title = data.items[i].docTitle ;
	   	   var m = L.marker([data.items[i].latitude , data.items[i].longitude], {title: title , icon: greenIcon}).addTo(map<%= unique_id %>).bindPopup("<a href=" +  url + ">" + title + "</a>") ;
   	 	   // searchLayer<%= unique_id %>.addLayer(m) ; 
   	  		console.log(m) ;
   	  		layerGroup.addLayer(m);
	  }
        }
     });
    }

    var baselayer = L.tileLayer('https://a.tiles.mapbox.com/v3/jywarren.map-lmrwb2em/{z}/{x}/{y}.png', {
                attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
    }).addTo(map<%= unique_id %>) ; 

    var hash = new L.Hash(map<%= unique_id %>);    

   // var PurpleLayer = L.layerGroup.purpleLayer() ;
    var PurpleAirMarkerLayer = L.layerGroup.purpleAirMarkerLayer() ;
    var SkyTruth = L.layerGroup.skyTruthLayer() ;
    var Fractracker = L.layerGroup.fracTrackerLayer() ;
    var OdorReport = L.layerGroup.odorReportLayer() ;
    var MapKnitter = L.layerGroup.mapKnitterLayer() ;
    var ToxicRelease = L.layerGroup.toxicReleaseLayer() ;

    var OpenInfraMap_Power = L.tileLayer('https://tiles-{s}.openinframap.org/power/{z}/{x}/{y}.png',{
        maxZoom: 18,
        attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>, <a href="http://www.openinframap.org/about.html">About OpenInfraMap</a>'
    });
    var OpenInfraMap_Petroleum = L.tileLayer('https://tiles-{s}.openinframap.org/petroleum/{z}/{x}/{y}.png', {
      maxZoom: 18,
      attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>, <a href="http://www.openinframap.org/about.html">About OpenInfraMap</a>'
    });
    var OpenInfraMap_Telecom = L.tileLayer('https://tiles-{s}.openinframap.org/telecoms/{z}/{x}/{y}.png', {
      maxZoom: 18,
      attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>, <a href="http://www.openinframap.org/about.html">About OpenInfraMap</a>'
    });
    var OpenInfraMap_Water = L.tileLayer('https://tiles-{s}.openinframap.org/water/{z}/{x}/{y}.png',{
      maxZoom: 18,
      attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>, <a href="http://www.openinframap.org/about.html">About OpenInfraMap</a>'
    });

    var Justicemap_income = L.tileLayer.provider('JusticeMap.income') ;
    var JusticeMap_americanIndian = L.tileLayer.provider('JusticeMap.americanIndian') ;
    var JusticeMap_asian = L.tileLayer.provider('JusticeMap.asian') ;
    var JusticeMap_black = L.tileLayer.provider('JusticeMap.black') ;
    var JusticeMap_multi = L.tileLayer.provider('JusticeMap.multi') ;
    var JusticeMap_hispanic = L.tileLayer.provider('JusticeMap.hispanic') ;
    var JusticeMap_nonWhite = L.tileLayer.provider('JusticeMap.nonWhite') ;
    var JusticeMap_white = L.tileLayer.provider('JusticeMap.white') ;
    var JusticeMap_plurality = L.tileLayer.provider('JusticeMap.plurality') ;
    
    var clouds = L.OWM.clouds({showLegend: true, opacity: 0.5});
    var cloudscls = L.OWM.cloudsClassic({});
    var precipitation = L.OWM.precipitation({});
    var precipitationcls = L.OWM.precipitationClassic({});
    var rain = L.OWM.rain({});
    var raincls = L.OWM.rainClassic({});
    var snow = L.OWM.snow({});
    var pressure = L.OWM.pressure({});
    var pressurecntr = L.OWM.pressureContour({});
    var temp = L.OWM.temperature({});
    var wind = L.OWM.wind({});

    var city = L.OWM.current({intervall: 15, minZoom: 3});
    var windrose = L.OWM.current({intervall: 15, minZoom: 3, markerFunction: myWindroseMarker, popup: false, clusterSize: 50,imageLoadingBgUrl: 'https://openweathermap.org/img/w0/iwind.png' });
    windrose.on('owmlayeradd', windroseAdded, windrose); 

    var baseMaps = {
      "Baselayer1": baselayer
    };
    var overlayMaps = {
     // "PurpleAirLayer-HeatMap": PurpleLayer ,
      "PurpleAirLayer-Markers": PurpleAirMarkerLayer ,
      "SkyTruth": SkyTruth , 
      "Fractracker" : Fractracker ,
      "ToxicRelease": ToxicRelease ,
      "OdorReport": OdorReport ,
      "MapKnitter": MapKnitter ,
      "OpenInfraMap_Power": OpenInfraMap_Power ,
      "OpenInfraMap_Telecom": OpenInfraMap_Telecom ,
      "OpenInfraMap_Petroleum": OpenInfraMap_Petroleum ,
      "OpenInfraMap_Water": OpenInfraMap_Water ,
      "Justicemap_income": Justicemap_income,
      "JusticeMap_americanIndian": JusticeMap_americanIndian ,
      "JusticeMap_asian": JusticeMap_asian ,
      "JusticeMap_black": JusticeMap_black,
      "JusticeMap_multi": JusticeMap_multi ,
      "JusticeMap_hispanic": JusticeMap_hispanic ,
      "JusticeMap_nonWhite": JusticeMap_nonWhite,
      "JusticeMap_white": JusticeMap_white ,
      "JusticeMap_plurality": JusticeMap_plurality ,
         "Clouds": clouds ,
         "clouds (classic)": cloudscls ,
         "precipitation": precipitation ,
         "precipitation (classic)": precipitationcls , 
         "rain": rain , 
         "rain (classic)": raincls ,
         "snow": snow , 
         "pressure": pressure ,
         "pressure contour (zoom in)": pressurecntr , 
         "temp": temp , 
         "wind": wind , 
         "Cities (zoom in)": city  , 
         "windrose (zoom in)": windrose
    };
    L.control.layers(baseMaps,overlayMaps).addTo(map<%= unique_id %>);
    
  </script>
